{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\React\\\\react-calculator\\\\src\\\\store\\\\CalculatorProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport CalculatorContext from './calculator-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CalculatorReducer(state, action) {\n  if (action.type === 'FIRST_NUMBER') {\n    let newNumber = state.firstNumber.concat(action.digit);\n    return { ...state,\n      firstNumber: newNumber\n    };\n  }\n\n  if (action.type === 'SECOND_NUMBER') {\n    let newNumber = state.secondNumber.concat(action.digit);\n    return { ...state,\n      secondNumber: newNumber\n    };\n  }\n\n  if (action.type === 'OPERATOR') {\n    return { ...state,\n      operator: action.sign\n    };\n  }\n}\n\n_c = CalculatorReducer;\nconst defaultCalculatorState = {\n  firstNumber: [],\n  secondNumber: [],\n  operator: null\n};\n\nfunction CalculatorProvider(props) {\n  _s();\n\n  let [calculatorState, dispatchCalculatorAction] = useReducer(CalculatorReducer, defaultCalculatorState);\n  const calculatorContext = {\n    firstNumber: calculatorState.firstNumber,\n    secondNumber: calculatorState.secondNumber,\n    operator: calculatorState.operator,\n    enterNumber: enterNumberToCalculator,\n    enterOperator: enterOperatorToCalculator\n  };\n\n  function enterNumberToCalculator(digit) {\n    if (!calculatorState.operator) {\n      dispatchCalculatorAction({\n        type: \"FIRST_NUMBER\",\n        digit: digit\n      });\n    } else {\n      dispatchCalculatorAction({\n        type: \"SECOND_NUMBER\",\n        digit: digit\n      });\n    }\n  }\n\n  function enterOperatorToCalculator(sign) {\n    dispatchCalculatorAction({\n      type: \"OPERATOR\",\n      sign: sign\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(CalculatorContext.Provider, {\n    value: CalculatorContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CalculatorProvider, \"dke3Vr9ZNmHaN1aajw4pFS57pnA=\");\n\n_c2 = CalculatorProvider;\nexport default CalculatorProvider;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CalculatorReducer\");\n$RefreshReg$(_c2, \"CalculatorProvider\");","map":{"version":3,"sources":["C:/Users/hp/Desktop/React/react-calculator/src/store/CalculatorProvider.js"],"names":["React","useReducer","CalculatorContext","CalculatorReducer","state","action","type","newNumber","firstNumber","concat","digit","secondNumber","operator","sign","defaultCalculatorState","CalculatorProvider","props","calculatorState","dispatchCalculatorAction","calculatorContext","enterNumber","enterNumberToCalculator","enterOperator","enterOperatorToCalculator","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,iBAAP,MAA8B,sBAA9B;;;AAEA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkCC,MAAlC,EAA0C;AACtC,MAAGA,MAAM,CAACC,IAAP,KAAgB,cAAnB,EAAmC;AAC/B,QAAIC,SAAS,GAAGH,KAAK,CAACI,WAAN,CAAkBC,MAAlB,CAAyBJ,MAAM,CAACK,KAAhC,CAAhB;AACA,WAAO,EACH,GAAGN,KADA;AAEHI,MAAAA,WAAW,EAAED;AAFV,KAAP;AAIH;;AACD,MAAGF,MAAM,CAACC,IAAP,KAAgB,eAAnB,EAAoC;AAChC,QAAIC,SAAS,GAAGH,KAAK,CAACO,YAAN,CAAmBF,MAAnB,CAA0BJ,MAAM,CAACK,KAAjC,CAAhB;AACA,WAAO,EACH,GAAGN,KADA;AAEHO,MAAAA,YAAY,EAAEJ;AAFX,KAAP;AAIH;;AACD,MAAGF,MAAM,CAACC,IAAP,KAAgB,UAAnB,EAA+B;AAC3B,WAAO,EACH,GAAGF,KADA;AAEHQ,MAAAA,QAAQ,EAAEP,MAAM,CAACQ;AAFd,KAAP;AAIH;AACJ;;KArBQV,iB;AAuBT,MAAMW,sBAAsB,GAAG;AAC3BN,EAAAA,WAAW,EAAE,EADc;AAE3BG,EAAAA,YAAY,EAAE,EAFa;AAG3BC,EAAAA,QAAQ,EAAE;AAHiB,CAA/B;;AAMA,SAASG,kBAAT,CAA4BC,KAA5B,EAAmC;AAAA;;AAE/B,MAAI,CAACC,eAAD,EAAkBC,wBAAlB,IAA8CjB,UAAU,CAACE,iBAAD,EAAoBW,sBAApB,CAA5D;AAEA,QAAMK,iBAAiB,GAAG;AACtBX,IAAAA,WAAW,EAAES,eAAe,CAACT,WADP;AAEtBG,IAAAA,YAAY,EAAEM,eAAe,CAACN,YAFR;AAGtBC,IAAAA,QAAQ,EAAEK,eAAe,CAACL,QAHJ;AAItBQ,IAAAA,WAAW,EAAEC,uBAJS;AAKtBC,IAAAA,aAAa,EAAEC;AALO,GAA1B;;AAQA,WAASF,uBAAT,CAAiCX,KAAjC,EAAwC;AACpC,QAAG,CAACO,eAAe,CAACL,QAApB,EAA8B;AAC1BM,MAAAA,wBAAwB,CAAC;AACrBZ,QAAAA,IAAI,EAAE,cADe;AAErBI,QAAAA,KAAK,EAAEA;AAFc,OAAD,CAAxB;AAIH,KALD,MAMK;AACDQ,MAAAA,wBAAwB,CAAC;AACrBZ,QAAAA,IAAI,EAAE,eADe;AAErBI,QAAAA,KAAK,EAAEA;AAFc,OAAD,CAAxB;AAIH;AACJ;;AAED,WAASa,yBAAT,CAAmCV,IAAnC,EAAyC;AACrCK,IAAAA,wBAAwB,CAAC;AACrBZ,MAAAA,IAAI,EAAE,UADe;AAErBO,MAAAA,IAAI,EAAEA;AAFe,KAAD,CAAxB;AAIH;;AAED,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAIX,iBAArC;AAAA,cACKc,KAAK,CAACQ;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAvCQT,kB;;MAAAA,kB;AAyCT,eAAeA,kBAAf","sourcesContent":["import React, { useReducer } from 'react'\r\nimport CalculatorContext from './calculator-context'\r\n\r\nfunction CalculatorReducer(state, action) {\r\n    if(action.type === 'FIRST_NUMBER') {\r\n        let newNumber = state.firstNumber.concat(action.digit)\r\n        return({\r\n            ...state,\r\n            firstNumber: newNumber\r\n        })\r\n    }\r\n    if(action.type === 'SECOND_NUMBER') {\r\n        let newNumber = state.secondNumber.concat(action.digit)\r\n        return({\r\n            ...state,\r\n            secondNumber: newNumber\r\n        })\r\n    }\r\n    if(action.type === 'OPERATOR') {\r\n        return({\r\n            ...state,\r\n            operator: action.sign\r\n        })\r\n    }\r\n}\r\n\r\nconst defaultCalculatorState = {\r\n    firstNumber: [],\r\n    secondNumber: [],\r\n    operator: null,\r\n}\r\n\r\nfunction CalculatorProvider(props) {\r\n\r\n    let [calculatorState, dispatchCalculatorAction] = useReducer(CalculatorReducer, defaultCalculatorState)\r\n\r\n    const calculatorContext = {\r\n        firstNumber: calculatorState.firstNumber,\r\n        secondNumber: calculatorState.secondNumber,\r\n        operator: calculatorState.operator,\r\n        enterNumber: enterNumberToCalculator,\r\n        enterOperator: enterOperatorToCalculator\r\n    }\r\n\r\n    function enterNumberToCalculator(digit) {\r\n        if(!calculatorState.operator) {\r\n            dispatchCalculatorAction({\r\n                type: \"FIRST_NUMBER\",\r\n                digit: digit\r\n            })\r\n        }\r\n        else {\r\n            dispatchCalculatorAction({\r\n                type: \"SECOND_NUMBER\",\r\n                digit: digit\r\n            })\r\n        }\r\n    }\r\n\r\n    function enterOperatorToCalculator(sign) {\r\n        dispatchCalculatorAction({\r\n            type: \"OPERATOR\",\r\n            sign: sign\r\n        })\r\n    }\r\n\r\n    return(\r\n        <CalculatorContext.Provider value = {CalculatorContext}>\r\n            {props.children}\r\n        </CalculatorContext.Provider>\r\n    )\r\n}\r\n\r\nexport default CalculatorProvider\r\n"]},"metadata":{},"sourceType":"module"}