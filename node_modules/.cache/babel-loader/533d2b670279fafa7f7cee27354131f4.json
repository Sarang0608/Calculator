{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\React\\\\react-calculator\\\\src\\\\store\\\\CalculatorProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport CalculatorContext from './calculator-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CalculatorReducer(state, action) {\n  if (action.type === 'FIRST_NUMBER') {\n    let newNumberArray = state.firstNumberArray.concat(action.digit);\n    let newNumber = \"\";\n\n    for (let item in newNumberArray) {\n      newNumber += newNumberArray[item];\n    }\n\n    newNumber = parseInt(newNumber);\n    return { ...state,\n      firstNumberArray: newNumberArray,\n      firstNumber: newNumber\n    };\n  }\n\n  if (action.type === 'SECOND_NUMBER') {\n    let newNumberArray = state.secondNumberArray.concat(action.digit);\n    let newNumber = \"\";\n\n    for (let item in newNumberArray) {\n      newNumber += newNumberArray[item];\n    }\n\n    newNumber = parseInt(newNumber);\n    return { ...state,\n      secondNumberArray: newNumberArray,\n      secondNumber: newNumber\n    };\n  }\n\n  if (action.type === 'OPERATOR') {\n    return { ...state,\n      operator: action.sign\n    };\n  }\n}\n\n_c = CalculatorReducer;\nconst defaultCalculatorState = {\n  firstNumberArray: [],\n  secondNumberArray: [],\n  firstNumber: null,\n  secondNumber: null,\n  operator: null,\n  result: 0\n};\n\nfunction CalculatorProvider(props) {\n  _s();\n\n  let [calculatorState, dispatchCalculatorAction] = useReducer(CalculatorReducer, defaultCalculatorState);\n  const calculatorContext = {\n    firstNumberArray: calculatorState.firstNumberArray,\n    secondNumberArray: calculatorState.secondNumberArray,\n    firstNumber: calculatorState.firstNumber,\n    secondNumber: calculatorState.secondNumber,\n    operator: calculatorState.operator,\n    result: calculatorState.result,\n    enterNumber: enterNumberToCalculator,\n    enterOperator: enterOperatorToCalculator\n  };\n\n  function enterNumberToCalculator(digit) {\n    if (!calculatorState.operator) {\n      dispatchCalculatorAction({\n        type: \"FIRST_NUMBER\",\n        digit: digit\n      });\n    } else {\n      dispatchCalculatorAction({\n        type: \"SECOND_NUMBER\",\n        digit: digit\n      });\n    }\n  }\n\n  function enterOperatorToCalculator(sign) {\n    dispatchCalculatorAction({\n      type: \"OPERATOR\",\n      sign: sign\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(CalculatorContext.Provider, {\n    value: calculatorContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CalculatorProvider, \"dke3Vr9ZNmHaN1aajw4pFS57pnA=\");\n\n_c2 = CalculatorProvider;\nexport default CalculatorProvider;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CalculatorReducer\");\n$RefreshReg$(_c2, \"CalculatorProvider\");","map":{"version":3,"sources":["C:/Users/hp/Desktop/React/react-calculator/src/store/CalculatorProvider.js"],"names":["React","useReducer","CalculatorContext","CalculatorReducer","state","action","type","newNumberArray","firstNumberArray","concat","digit","newNumber","item","parseInt","firstNumber","secondNumberArray","secondNumber","operator","sign","defaultCalculatorState","result","CalculatorProvider","props","calculatorState","dispatchCalculatorAction","calculatorContext","enterNumber","enterNumberToCalculator","enterOperator","enterOperatorToCalculator","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react'\r\nimport CalculatorContext from './calculator-context'\r\n\r\nfunction CalculatorReducer(state, action) {\r\n    if(action.type === 'FIRST_NUMBER') {\r\n        let newNumberArray = state.firstNumberArray.concat(action.digit)\r\n        let newNumber = \"\"\r\n        for(let item in newNumberArray) {\r\n            newNumber += newNumberArray[item]\r\n        }\r\n        newNumber = parseInt(newNumber)\r\n        return({\r\n            ...state,\r\n            firstNumberArray: newNumberArray,\r\n            firstNumber: newNumber\r\n        })\r\n    }\r\n    if(action.type === 'SECOND_NUMBER') {\r\n        let newNumberArray = state.secondNumberArray.concat(action.digit)\r\n        let newNumber = \"\"\r\n        for(let item in newNumberArray) {\r\n            newNumber += newNumberArray[item]\r\n        }\r\n        newNumber = parseInt(newNumber)\r\n        return({\r\n            ...state,\r\n            secondNumberArray: newNumberArray,\r\n            secondNumber: newNumber\r\n        })\r\n    }\r\n    if(action.type === 'OPERATOR') {\r\n        return({\r\n            ...state,\r\n            operator: action.sign\r\n        })\r\n    }\r\n}\r\n\r\nconst defaultCalculatorState = {\r\n    firstNumberArray: [],\r\n    secondNumberArray: [],\r\n    firstNumber: null,\r\n    secondNumber: null,\r\n    operator: null,\r\n    result: 0\r\n}\r\n\r\nfunction CalculatorProvider(props) {\r\n\r\n    let [calculatorState, dispatchCalculatorAction] = useReducer(CalculatorReducer, defaultCalculatorState)\r\n\r\n    const calculatorContext = {\r\n        firstNumberArray: calculatorState.firstNumberArray,\r\n        secondNumberArray: calculatorState.secondNumberArray,\r\n        firstNumber: calculatorState.firstNumber,\r\n        secondNumber: calculatorState.secondNumber,\r\n        operator: calculatorState.operator,\r\n        result: calculatorState.result,\r\n        enterNumber: enterNumberToCalculator,\r\n        enterOperator: enterOperatorToCalculator\r\n    }\r\n\r\n    function enterNumberToCalculator(digit) {\r\n        if(!calculatorState.operator) {\r\n            dispatchCalculatorAction({\r\n                type: \"FIRST_NUMBER\",\r\n                digit: digit\r\n            })\r\n        }\r\n        else {\r\n            dispatchCalculatorAction({\r\n                type: \"SECOND_NUMBER\",\r\n                digit: digit\r\n            })\r\n        }\r\n    }\r\n\r\n    function enterOperatorToCalculator(sign) {\r\n        dispatchCalculatorAction({\r\n            type: \"OPERATOR\",\r\n            sign: sign\r\n        })\r\n    }\r\n\r\n    return(\r\n        <CalculatorContext.Provider value = {calculatorContext}>\r\n            {props.children}\r\n        </CalculatorContext.Provider>\r\n    )\r\n}\r\n\r\nexport default CalculatorProvider\r\n"]},"metadata":{},"sourceType":"module"}